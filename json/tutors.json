{"route":"/","type":"course","title":" Programming Fundamentals 1","summary":"This is an introductory Programming module and assumes no prior knowledge of programming. ","contentMd":"# Programming Fundamentals 1\n\nThis is an introductory Programming module and assumes no prior knowledge of programming. \n\nIn this module, we will introduce you to the Java programming language through the BlueJ Development Environment (BDE).\n\nFirst, we will work through non-complex problems that will introduce you to the basic constructs of programming languages i.e. Sequence, Selection and Loops.  You will also learn to use variables, different data types, manipulate the data, logical operators and methods.  \nThen we will progress to more complex problems that will briefly introduce you to object-oriented programming and data structures.  You will do a deeper dive into both of these areas in the semester 2 module, Programming Fundamentals 2.","frontMatter":{},"id":"prog-fund-1-sept-25","img":"https://{{COURSEURL}}/course.png","imgFile":"course.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/topic/{{COURSEURL}}/topic-00-assessment","type":"topic","title":" Assignments","summary":"Assignment details for Programming Fundamentals 1.","contentMd":"# Assignments\n\nAssignment details for Programming Fundamentals 1. ","frontMatter":{},"id":"topic-00-assessment","img":"https://{{COURSEURL}}/topic-00-assessment/topic.png","imgFile":"topic.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"route":"/talk/{{COURSEURL}}/topic-00-assessment/talk-1-in-class-test","type":"talk","title":"Conditional Statements","summary":"booleans · rel ops · logical ops","contentMd":"Conditional Statements\n\nbooleans · rel ops · logical ops \n\n","frontMatter":{},"id":"talk-1-in-class-test","img":"https://{{COURSEURL}}/topic-00-assessment/talk-1-in-class-test/a-class-test-1.jpg","imgFile":"a-class-test-1.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"pdf":"https://{{COURSEURL}}/topic-00-assessment/talk-1-in-class-test/a-class-test.pdf","pdfFile":"a-class-test.pdf"},{"route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1","type":"lab","title":"Assignment-1","summary":"This is your first assignment that will contribute to your grade for the semester.  It is worth **40%** of your overall grade. It is based on what was covered on the first 6 weeks (talks, labs - steps, exercises, and challenges). You won't need to use anything else, in fact using code not covered will mean you fall foul of the **constraints** with implications for your score.","contentMd":"# Assignment 1 \n\nThis is your first assignment that will contribute to your grade for the semester.  It is worth **40%** of your overall grade. It is based on what was covered on the first 6 weeks (talks, labs - steps, exercises, and challenges). You won't need to use anything else, in fact using code not covered will mean you fall foul of the **constraints** with implications for your score.\n\n\n\nYou are asked to write code to produce a working animation of your choice. You will be asked to do this using particular elements of code you have learned so far. You will also be asked not to use particular elements. More details in tab on Specification\n\nPlease take the time to read all the information given.\n\nWhile many can get by doing just the labs, most can’t. Engage in your labs, lectures and learner community.\n\n\nThis following will be detailed, for your first assignment:\n\n - *Advice:* how to approach the assignment\n - *Specification:* What is expected from your code.\n - *Constraints:* Language elements that you are restricted from using in this assignment.\n - *Marking/Rubric:* The marking scheme for the assignment.\n - *ReadMe:* Template to be used for your readme \n - *Reflection* Template to be used for reflection\n - *Submission:* Submission details including submission date.\n\n \n**NOTE You write the code so that you can reflect on your work.**\n\n**We mark your REFLECTION which references your code.**","frontMatter":{"order":1},"id":"book-01assignment-1","img":"https://{{COURSEURL}}/topic-00-assessment/book-01assignment-1/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Assignment 1 ","shortTitle":"Assignment-1","contentMd":"# Assignment 1 \n\nThis is your first assignment that will contribute to your grade for the semester.  It is worth **40%** of your overall grade. It is based on what was covered on the first 6 weeks (talks, labs - steps, exercises, and challenges). You won't need to use anything else, in fact using code not covered will mean you fall foul of the **constraints** with implications for your score.\n\n\n\nYou are asked to write code to produce a working animation of your choice. You will be asked to do this using particular elements of code you have learned so far. You will also be asked not to use particular elements. More details in tab on Specification\n\nPlease take the time to read all the information given.\n\nWhile many can get by doing just the labs, most can’t. Engage in your labs, lectures and learner community.\n\n\nThis following will be detailed, for your first assignment:\n\n - *Advice:* how to approach the assignment\n - *Specification:* What is expected from your code.\n - *Constraints:* Language elements that you are restricted from using in this assignment.\n - *Marking/Rubric:* The marking scheme for the assignment.\n - *ReadMe:* Template to be used for your readme \n - *Reflection* Template to be used for reflection\n - *Submission:* Submission details including submission date.\n\n \n**NOTE You write the code so that you can reflect on your work.**\n\n**We mark your REFLECTION which references your code.**","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Assignment-1","id":"Assignment-1","type":"step"},{"title":" Assignment Advice","shortTitle":"Advice","contentMd":"# Assignment Advice\n\n## Before you start\nRead the specification carefully.\nIf you have kept up to date with labs and lectures it will make lots of sense. It maybe slighly daunting otherwise.\n\n## Getting Going\nStart working on the assignment early.\n\nIt would be very unlikely that you could sit down and write a solution to your assignment in one go. Start small. Get something working. Then add to it. Comment your code as you go.\n\n## Backups\nKeep a backup each day/stage so if you totally mess up you always have your last working version from which to move on from again. e.g. ver1, ver2 etc.\n\n## Time\nYou need to call a halt to your coding at some stage so that you can write up the reflection and make use of **line numbers**. When you finish coding, and **BEFORE** your start writing the reflection, **EDIT | AUTO FORMAT**\n\nIf you change the code after you write the reflection, you will need to update all the line numbers in your reflection.\nAllow plenty of time for the reflection - I would suggest 1 day for the write up and submission. At a minimum you will need 2-3 hours.\n*Bear in mind it's your reflection that use to direct what we mark.*\n\n## Before Submitting\n\nWhen you think you are ready to submit, in order to **maximise marks**, check the following: \n\n- Ensure you have covered all the elements mentioned in the **marking scheme / rubric**.\n\n- Ensure that you have **NOT** used elements ruled out in the **constraints** section, or you will automatically receive a **FAIL** mark.\n\n- Ensure specifically that your indentation is consistent. Processing will format code correctly if you use **Edit | AutoFormat**. As already stated, do this **BEFORE** completing your comments and reflection as line numbers will be incorrect otherwise (more on this later) \n\n- Write **comments** to explain what your animation does and particularly how tricky code works and what it does.\n\n- Ensure that your name, student number and one sentence summary of your program, is written at the top of the main sketch file.\n\n- You will submit 3 files:\n\t1. Commented code.\n\t2. Reflection.\n\t3. Readme\n\n\n- Ensure that you have named the submission (zip) file according to the prescribed naming convention. \n- Read the submission tab. It gives examples of how each file/tab should be done","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Advice","id":"Advice","type":"step"},{"title":" Specification","shortTitle":"Specification","contentMd":"# Specification\n\n\n\nYou are asked to write code to produce a working animation of your choice. The aim of the assignment is for you to demonstrate your understanding of structures seen so far, so you are asked to include the following:\n\n## Text\nThe drawing should incorporate white text.\n\nAt the top of the animation, display your **full name, and is displayed over your animation, so that you can see the name**\n\nAt the bottom of the animation, display your **student number** . **This should be  displayed over your drawing, so that you can see the number**\n\n## Constraints\nThere are **constraints** on what you can and can not use. These will be listed in the Constraints tab.\n\n## Aims\n\nYou should aim to demonstrate the following in your creation:\n\n- The usual Processing class containing the **setup(), draw(), etc.**  \n\n- **Sizing** the display window\n\n- Use of **selection (if)**  (including use of else)\n\n- Use of **iteration (loops).** (including nested loops)\n\n- Use of **bespoke methods** that you define and write yourself (use examples of the different types)\n *e.g. similar to eyes(), drawX().* \n *e.g. drawCell(), saveDrawingToFile().*\n *e.g. cubed()* *pickColor()*\n \n\n- Use of **Processing methods** *e.g. circle(), random() *etc.\n\n- Use of **Mouse methods** *e.g. mousePressed(), etc.*\n\n- Use of **String methods** (e.g. *length(), charAt(), etc.*).\n\n\n\n## Notes:\n- consult the rubric/marking scheme to see how can maximize marks for each of the above. \n\n- The complexity/creativity/quality of the drawing is important i.e. higher quality will receive higher weighting factor. (see marking scheme).\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Specification","id":"Specification","type":"step"},{"title":" Constraints","shortTitle":"Constraints","contentMd":"# Constraints\n\nHave you ever tried to do a job with only a limited set of tools?\n\nWell, that is what we are doing with this first assignment, we are limiting you're available tools to what we have studied. This is particularly relevant to those who may have studied programming before. **You may only use the materials we've covered up to and including Strings for this assignment**. \n\nWe include constraints to help avoid plagiarism, as well as providing a challenge for those who have studied programming before. The goal is to see what you can apply after what you've learned to date (as opposed to finding a solution which is frowned upon). \n\nOn the **#programming-assignments** channel in Slack, you can ask about using different features if you want clarification and we will respond there for all to see. When in doubt, Ask! \n\nAs a general rule if we didn't cover it/mention it, don't use it.\n\n\n# Elements RULED IN for this assignment:\nAlthough not covered explicitly you may use any of the follow from the [processing reference](https://processing.org/reference/)\n\n- 2d primitives\n- Operators (arithmetic, logic, boolean)\n- Trigonometry\n- Constants (from the Processing library e.g. PI)\n- Primitive Data Types (including **color** which allows you to store RGB values in a variable of type color)\n- Data Conversion\n- random()\n- rotate()\n- translate()\n- color()\n- frameCount (although not recommended)\n- charAt() \n- global variables\n- line() - this is not included as one of your 3 Processing shapes\n- rectMode()\n- ellipseMode()\n- int()\n\n\n# Elements RULED OUT for this assignment:\n\nYou are not allowed use any of the following: \n\n- Objects (except **String** which is required)\n- 3d Renderers\n- Arrays\n- Collections\n- PShape\n- PImage\n- Materials\n- Font\n- casting (**NB. use of int() is allowed**)\n- Transforms other than those highlighted in previous section\n- pushMatrix()\n- popMatrix()\n- JOptionPane() \n- PVector\n- randomSeed()\n- noLoop\n\nUsing any of these will lead to failure of the assignment. \n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Constraints","id":"Constraints","type":"step"},{"title":" Marking Scheme / Rubric","shortTitle":"Marking-Rubric","contentMd":"# Marking Scheme / Rubric\n\nTHIS MAY CHANGE FOR CLARITY.\n\nThere are two components to your overall mark:\n\n- Structure of code\n- Complexity/Quality\n\n*Please read below regarding **self assessment** & **interviews**.*\n\n\n## Structure of Code \"Rubric\" (100 Marks)\n\nPart | Description | Marks     \n-----|-------------|-----------|\na | **Comments, indentation/formatting, naming, structure of code, inclusion of both 'Readme and Reflection'.** | **(9)**\nb | **Working animation** <br> i.e. inclusion of the usual Processing sketch containing the draw(), setup(), use of size()etc.  | **(6)**\nc | Use of **if** statements | **(10)**\nd | Use of **loops** (including nested loops) | **(20)**\ne | Use of different types of **bespoke methods** that you defined and wrote yourself <br>  e.g. eyes(), drawX().   | **(20)**\nf | Use of **Processing methods** <br> e.g. random(). | **(10)**\ng | Use of **Mouse methods** <br> e.g. mousePressed().| **(10)**\nh | Use of **String methods** <br> e.g. length().| **(10)**\ni | final product (artistic value, originality, innovativeness, creativity, polish) | **(5)**\n\nFor marking purposes, all parts are exclusive, meaning examples won't be counted twice for marking. e.g. string and mouse methods used won't also be counted as processing methods, you'll need to use others.\n\nCode that is not integral/meaningful to your solution will not be counted. Only code that prepares for /or outputs to the display window is meaningful in this application. The console is not.\n\n*e.g. including a nested for loop from the notes to output to the console will receive 0 marks.*\n\n## Detailed Analytical Rubric\nWhile we won't always have an analytical rubric, on this occassion we do to help you see exactly how all the marks are applied. This will be provided after the first week of the assignment. You may decide to modify your solution to maximize marks after reading the detailed analytical rubric. However, your should focus on solving the initial specification first.\n\n\n\n## Complexity/Quality (10 Marks)\n\nThis is a mark out of 10 based on the complexity of the problem solved/code. So you will get more marks if the creation is more involved than one that is very simple. Please do not confuse an elegant solution of a complex problem with a simple problem.\n\ne.g. using a loop instead of 20 lines of code.\n\ne.g. using nested loops\n\ne.g. calling user defined methods within a loop/nested loop\n\ne.g. creativity of the artwork produced and is similar or different everytime the program is run\n \n\n## How is the final mark calculated?\n \nThe final mark is calculated by multiplying the two component marks and dividing by 10. This means that complexity is a multiplier so a weakness in that will negatively affect your grade. Expect the simplest of solutions to be 4/10\n\n Example:\n \n - Structure of code = 80/100\n - Complexity/Quality = 9/10\n - Pre-interview  mark = (80 by 9)/10 = 72%\n\n\n## Interview (and subsequent grade calculation)\n\nWe will interview you in the weeks after submission, during your lab classes. This interview is to ascertain that the work is your own and that you understand how all parts work.  You may be asked any questions on : \n\n- Any of the code.\n- How you decided on your creation.\n- How you developed your creation; where did you start first, etc?\n- Anything else.\n\nYou will be given a mark out of 10 for the interview.  This mark will be a multiplier of your overall grade.  Note for the same code, there maybe very different final marks highlighted by the following examples:\n\n### Example 1:\n \n - Structure of code = 80/100\n - Complexity/Quality = 9/10\n - Interview = 10/10 \n - Final mark = (80 by 9 by 10)/100 = 72%\n\n### Example 2:\n \n - Structure of code = 80/100\n - Complexity/Quality = 9/10\n - Interview = 8/10\n - Final mark = (80 by 9 by 8)/100 = 57.6%\n\n### Example 3:\n \n - Structure of code = 80/100\n - Complexity/Quality = 9/10\n - Interview = 0/10\n - Final mark = (80 by 9 by 8)/100 = 0%\n\n0 might be given if for example during the course of the interview it is established that author cannot explain his/her code at all, or where it is established that it is not the student's work.\nFailure to be present for the interview will also result in the interview multiplier of 0 being applied. \n\n### Example 4:\n \n - Structure of code = 80/100\n - Complexity/Quality = 9/10\n - Interview = 3/10\n - Final mark = (80 by 9 by 3)/100 = 21.6%\n\n**Example 4** shows how breaking a the constraints will be marked - i.e. if you ignore the constraints, we will mark your code and automatically apply 3/10 for the Interview without needing to interview you. We may interview you but the interview mark will not be higher than 3/10 .","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Marking-Rubric","id":"Marking-Rubric","type":"step"},{"title":" Readme tab / file","shortTitle":"Readme","contentMd":"# Readme tab / file\n\nYou must include a readme tab in the sketch.  The contents of this tab should be of the following format (and should be all commented out using the multi-line comment):\n\n~~~\n/*\nName : \nStudent Number:\n\nBrief description of piece (1 or 2 sentences MAX):\n===================================================\n\n\n\n\nInstructions:\n=============\n\nHow to run the program and state how to see any interactive features in your program here\n\n\nKnown bugs/problems:\n====================\n\nAny sources referred to during the development of the assignment.\nYou don't need to reference lecture/lab materials.\n**You do need to specify precisely any other sources**.\n\ni.e. processing.org is too generic. You need to be more specific \n\ne.g. https://processing.org/examples/bouncingball.html \n     or a page number from a book etc.\n\nFailure to fully  reference such material used may result in plagiarism process being brought into play. \n*/\n~~~\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Readme","id":"Readme","type":"step"},{"title":" Reflection tab / file","shortTitle":"Reflection","contentMd":"# Reflection tab / file\n\nYou must carry out your own self assessment on your work and show this by including a **reflection** tab in the sketch.  Use the detailed analytical rubric to reflect on the work you've done, and critically assess yourself accordingly. You must assign marks for each section.\n\nIn marking your work we will only look at the sections you point us to in your reflection. Don't expect us to assign any marks if you don't complete the reflection. Therefore, allow plenty of time to complete it properly.\n\nI would suggest that you finish all coding before completing the reflection.\nYou should have selected **Edit | Auto Format** previously and added your code comments already.\n\nDetail for each row of the rubric, examples that you used in your code, what they are used for, and line numbers where they can be found. Unless otherwise stated a max of 3 examples is enough for each element. You don't need to be exhaustive.\n\nIn the starter template below change the Xs to numbers\nmodify line numbers to match your code\n\nYou don't need to provide an exhaustive list of every occurance but you should give **at least** enough examples to try achieve the mark you are aiming for (this will be clear from the detailed analytical rubric). \n\nTIP:\nRight click | show usage\nRight click | show declaration\n\n\nThe template below is a sample of how you might fill in the reflection.\nPlease refer to the *detailed rubric* in the **Marking-Rubric** tab. Don't just use the template below, as further comment is required. \n\nYou must mark yourself.\nYou must supply evidence for those marks.\n\n\n~~~\n/* Reflection\n\n** EXAMPLE ONLY **\n** REPLACE THIS ENTIRE TEMPLATE WITH THE DETAILS HANDED IN WEEK 2 OF THE ASSIGNMENT**\n******************\n\nName : \n\nStudent Number:\n\nPart A - Mark (X /9)\n-----------------------------\n\nComments - 0/1\nindented/formatted - 0/1 \nnaming - 0/1\ninclusion of Readme - 0/1 \ninclusion of completed Reflection - 0/5\n\n\nPart B - Mark (X /6)\n-----------------------------\n\nline xx Sizing 0/1\n\nline XX - draw()  0/3\nline XX - setup()  0/2\n\n** THIS FOLLOWING SECTIONS ARE INCOMPLETE\nYOU WILL NEED TO COMPLETE THEM  YOURSELF **\n\n\nPart C - Mark (X /10)\n-----------------------------\nUse of if statements:\n\nline xx shows if ..\nline xx shows nested if..\n\nPart D - Mark (X/20)\n-----------------------------\n\nline xx - loop using for\n  :\nline xx - nested loop using for\nline xx - nested loop using while \n\n\nPart E - Mark (0/20)\n-----------------------------\n\nline xx - method 1 - shows no parameters etc. \n   :\nline xx - method x - (e.g. return value, 3 parameters )\n\nPart F - Mark (0/10)\n-----------------------------\n\nline xx - use of Processing function x1 ..\n   :\nline xx - use of Processing function xn\n\nPart G - Mark (0/10)\n-----------------------------\n\nline xx - use of mouse function x1 ..\n   :\nline xx - use of mouse function xn\n\nPart H - Mark (0/10)\n-----------------------------\n\nline xx - use of string, string  function x1 ..\n   :\nline xx - use of string function xn\n\nPart I - Mark (0/5)\n-----------------------------\n\ncomments here with some line numbers if that helps. \n\nOverall mark (0/100)\n-----------------------------\nShow number components and total here  (e.g. 3+2+5+6+20+16+5+6+4= 61)\n\n\n** DON’T FORGET TO TOTAL UP OR WE WILL TOO ** \n\nThis will be multiplied by a mark out of 10 for complexity of the problem you tackled. E.g. 10/10 = *1\n(We will decide on that)\n\nThis will be multiplied by a mark out of 10 for your interview. \n\n*** Constraints ***\nIgnoring the constraints results in the equivalent of scoring 3/10 = .3 for interview\n\n\n*/\n~~~\n\n\n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Reflection","id":"Reflection","type":"step"},{"title":"  Handup of submission","shortTitle":"Submission","contentMd":"#  Handup of submission\n\n## Date\n\nThe submission is due ***Sunday, 3rd November, 2024, 6:00PM***.\n\nLate submissions will incur a 15% penalty per each day late unless the student has been in touch with the lecturer at least 2 days before the submission time/date to look for an extension. Where this extension has been granted, the lecturer will be in touch with regard to an updated deadline. \n\n\n## Where \n\nThe dropbox is available in Moodle - Assignments '[Programming Fundamentals Assignment 1](https://moodle.wit.ie/course/view.php?id=206826#section-0)'\n\n\n\n## File naming convention\n\nYour files should be contained in a **folder** named  according to the rule: \n\n- *First name* + *Second name*, e.g. Donald Duck's folder would be called *DonaldDuck*. \n\nYou should then compress (zip) the **folder** that contains all the sketches used to develop your assignment; this is the file that you should submit.\n\n**Note:** Only .zip or .7z files will be accepted for submisison. \n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-01assignment-1/Submission","id":"Submission","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2","type":"lab","title":"Assignment2","summary":"Assignment 1 Spec · 60% of Grade ","contentMd":"# Assignment 2\n\nAssignment 1 Spec · 60% of Grade \n\nThis assignment is based on materials throughout the course. It will be written using the IntelliJ IDE.  ","frontMatter":"order:2","id":"book-2","img":"https://{{COURSEURL}}/topic-00-assessment/book-2/img/main.jpg","imgFile":"img/main.jpg","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Assignment 2","shortTitle":"Assignment2","contentMd":"# Assignment 2\n\nAssignment 1 Spec · 60% of Grade \n\nThis assignment is based on materials throughout the course. It will be written using the IntelliJ IDE.  ","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Assignment2","id":"Assignment2","type":"step"},{"title":" Similar(ish) Projects","shortTitle":"01","contentMd":"# Similar(ish) Projects\n\nIn your previous labs, you worked on a Shop project.  Your assignment will be similar(ish) to this project but will need more work\n\nThe solution to the Shop V2.2 project can be found [here](archives/ShopV2.2.zip).\n\nThe  full set of classes in the  Shop  Project is:\n\n![Class Diagram of the ShopV2.2 Project](img/01.png)\n\n\n\nThe *responsibility* of the *Product* class is to manage a single product. \n\nThe *responsibility* of the *Store* class is to manage an array of Products.\n\nThe *responsibility* of the *Driver* class is to manage the I/O with the console (including the menu).\n\n\nPlease use this code as a support for developing your CourseSys app.\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/01","id":"01","type":"step"},{"title":" Assignment Overview","shortTitle":"Overview","contentMd":"# Assignment Overview\n\nYou are tasked with developing a *Student Course System* Menu Driven App\n\nWhen you first run the system, the user is asked for the Course name and the number of Students: \n\n![](img/02.png)\n\nYou will then be shown a menu on the screen\n\n![](img/05.png)\n\nHere are a few rules associated with the app:\n\n- The course can have 0 to 30 students.  \n\n- Students on a course can be registered or not registered, only registered students can have pass the course\n\n- Each student has 6 (integer) marks (these will be stored in a primitive array). \n\n\n\n# Classes in the System\n\nThe *Course Sys* app will have three main classes :\n\n![](img/overview.png)\n\n- *Student*:  The responsibility for this class is to manage a single student in the System.  \n\n- *Course*: The responsibility for this class is to store and manage all the students in the system on a course.\n\n- *Driver*: The responsibility for this class is to manage the User Interface (UI) i.e. the menu and user input/output.\n\n\n# Instructions for Developing System\n\nThe instructions for developing the system and the above classes are on the following tabs. \n\nWe recommend, that you read the ENTIRE specification BEFORE starting to code. \n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Overview","id":"Overview","type":"step"},{"title":" Student class","shortTitle":"Student","contentMd":"# Student class\n\nThe responsibility for this class is to manage a single Student in the system.  \n\n\n\n![](img/Student01.png)\n\n\n\n** Remember, as soon as you enter the fields in a class in IntelliJ, you can GENERATE getters, setters, constructors and toString methods.  They are only basic methods and may need to be modified e.g. to add validation, change the format of the generated toString, etc.**\n\n---\n\n# Fields\n\nThere are four private fields in the Student class:\n\n- *name*: The student name is maximum 20 characters.  When creating a new student, if the String is longer than 20 characters, you shoud truncate the string to the first 20 chars (**Hint** see String method *substring()* for a good  way to do this).   When updating (setter)*name*, you should only update if the length is less than or equal to 20.  \n\n- *studentId*. This is an String that must be 8 chars long. The default value is \"Invalid\".\n\n- *marks*. This is a primitive array of integers and is of size 6, one mark for each module for the course. Validation on each of these marks - each of these ratings must be between 0 and 100 (inclusive) - default to 0. \n\n- *registered*: A boolean value, set to false if the student is not currently registered, true otherwise. \n\n\n---\n\n# Methods\n\n- Ensure that the constructor and mutators adhere to the validation rules listed above.  \n\n- Sample output from the toString is below:\n\n![](img/output01.png)\n\n- `calculateAverage()` - calculates average of student grades\n\n- `canPassByCompensation()` - See [Rules of Compensation Tab](/lab/prog-fund-1-sept-24/topic00-assignments/book-2/Rules%20of%20Compensation) tab for more information\n\n- `hasPassedCourse()` - returns true if all modules are 40 or greater, or can pass by compensation otherwise returns false\n\n- `printMarks()` - returns a list of students grades on a line, with a tab between each grade\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Student","id":"Student","type":"step"},{"title":" Course Class","shortTitle":"Course","contentMd":"# Course Class\n\nThe responsibility for the Course class is to manage an array  of students.\n\n![](img/Course01.png)\n\n---\n\n# Fields\n\nThere are two private fields in the class:\n\n- *students*: This is the array of Student in the app. \n\n- *courseName*: This is the name of the Course \n\n- *studentCount*: This is the number of students on the course (i.e. the size of the array)\n\n---\n\n# Constructor, getter and setter\n\nYou should write getters and  setters as per UML diagram - there is no setter needed for studentCount as it would not be appropriate to change its value.\n\n---\n\n\n# Listing methods \n\n- `listStudents()` - returns the string containing all students' details. \n\n- `listCurrentStudents()` -  returns a string containing all the details of all the students that are currently registered on the course. \n\n- `listOfStudentswithAverageMark()` - returns a string containing each student with their name and average mark (no more details required.)\n\n- `listStudentsAboveGivenAverageMark(double)`\nGiven a value, return a string containing all the details of the students whose average mark is greater than the inputted mark. \n\n- `listStudentsWhoHavePassed()` - returns a string containing all the details of all the students who have passed\n\n---\n\n\n# Calculation methods \n\n- `studentWithLowestAverageMark()` - returns one student with the lowest average mark (if any students exist), null otherwise. \n\n- `studentWithHighestAverageMark()` - returns one student with the highest average mark (if any students exist), null otherwise. \n\n- `calculateCourseAverage()`\nThis calculates and returns the average of all the students' average marks.\n\n\n# Other Methods\n\n-  `deRegisterStudent(int indexToDeRegister) `\nThis method checks that the index passed as a parameter is valid.  If it is:\n \n - valid, the student is retrieved and assuming the student IS currently registered, the student is then deregistered and the student object is returned.  If the student exists, but is already not registered, return null. \n - invalid, return null.\n\n-  `registerStudent(int indexToRegister) `\nThis method checks that the index passed as a parameter is valid.  If it is:\n \n - valid, the student is retrieved and assuming the student IS NOT currently registered, the student is then registered and the student object is returned.  If the student exists, but is already  registered, return null. \n - invalid, return null.\n- `isEmpty()`\nThis method checks if the students array is empty (can be used in listing methods). It returns \n    - true if there are no students in the array (studentCount == 0)\n    - false otherwise\n\n- `isFull()`\nThis method checks if the students array is full (can be used in adding methods). It returns \n    - true if there are no available spaces in the array (studentCount == students.length)\n    - false otherwise\n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Course","id":"Course","type":"step"},{"title":" Driver Class","shortTitle":"Driver","contentMd":"# Driver Class\n\nThe responsibility of the Driver class is to run the app and perform I/O with the user.  It is the only class that should have:\n\n- System.out.print statements\n- Scanner method calls.\n\n![](img/Driver01.png)\n\n\n# Fields\n\nThere are two  private fields in the *Driver* class:\n\n- **course**: this holds and manages the collection (array) of *students*. The user will be asked to input the number of students. This value should be used to instantiate the array to that size. \n- **input**: the Scanner object for reading from the user.\n\n\n# main method\n\nThe main method has one line of code:\n\n~~~\nnew Driver();\n~~~\n\n\n## Constructor\n\nWe will write a default constructor for this class.  There is one line of code in this method:\n\n~~~\npublic Driver() {\n        runMenu();\n    }\n~~~\n\n\n# Menu Displayed\n\nUsing the same approach adopted when deveoping the Shop projects, the following menu is *continually* displayed to the user: \n\n![](img/05.png)\n\nNote that the *mainMenu()* method displays the above menu and returns the user choice.  The *runMenu* method is the one that contains the switch statement that processes the user choice.  \n\nA desciption of each menu option is on the next tab.\n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Driver","id":"Driver","type":"step"},{"title":" Driver Menu","shortTitle":"DriverMenu","contentMd":"# Driver Menu\n\nThe menu should like : \n\n![](img/05.png)\n\n---\n\n\n# Course SYSTEM  Options\n\n## Option 1 - `Add a Student`\n\nTake in all the values for the student (apart from their marks) and create and add this student to the array of students. \n\n\n## Option 2 - `Add student marks`\n\nFirstly the user should be shown a list of al Students, then asked which student index number they wish to add marks to. (index number should be part of  the listing). Then the user is asked to input 6 values (marks) for this student. All values should be between 0 and 100 inclusive.\n\n\n## Option 3 - `Add a student to the course (Register)`\n\nFirstly the user should be shown a list of all students, then asked which student index number they wish to register (using index number). This student's information should be updated to reflect this. \n\n## Option 4 - `Remove a student from the course (De-Register)`\n\nFirstly the user should be shown a list of all students, then asked which student number they wish to deregister(using index number). This students's information should be updated to reflect this. \n\n## Option 5 - `List all students`\n\nList all details (including index and  each mark) of all students.\n\n\n## Option 6 - `List the students currently enrolled in the course` \n\nList all details (including each mark) of all students that are currently registered\n\n\n## Option 7 - ` List students whose average mark is greater than a given mark`\n\nAsk the user to enter a value, then calculate and print out all the students whose average is above this value.\n\n\n## Option 8 - `List the students' names with their average mark`\n\nList all students, with the following details (only):\n - name\n - average rating\n\n\n ## Option 9 - `Display average student mark`\n\n Calculate and display the average marks over all the students. \n\n## Option 10 - `Display student with the lowest average mark`\n\nCalculate the student with the lowest average mark in the array of students. All of this  students' details should be printed to the screen. \n\n## Option 11 - `Display student with the highest average mark ` \n\nCalculate the student with the highest average mark in the array of students.  All of this  students' details should be printed to the screen. \n\n## Option 12 - `List the students' names who have passed the course ` \n\nList all students, that are registered and have passed the course (all marks >= 40 or passed by compensation)\n\n## Option 0 - `Exit`\n\nThis option exits the application.  \n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/DriverMenu","id":"DriverMenu","type":"step"},{"title":" Submitting your assignment","shortTitle":"Submitting","contentMd":"# Submitting your assignment\n \n\nWhen you are ready to submit your assignment:\n\n- Rename your project name using the naming convention **firstnameSurname** e.g. **maireadMeagher**. (inside IntelliJ)\n\n- Zip the folder containing all the project files, and name the folder **firstnameSurname.zip**.  No WINRARs please!\n\n\n- The final deadline for this assignment is **Sunday 8th  December, 2024 at 18:00 hours.**.\n\nFor flexibility, there are several options for interview and these are detailed below.  \n\n\n## Last Week of lectures : `Interviews during lab time`\n\nIf you are ready to submit your work before or during this week's labtime, you can submit early and request an interview during your labs.\n\n\n## Monday 9th  December: `Written Exam`\n\nYou will be asked to complete a written test which tests your knowledge of the code you have submitted. We plan to have this on Monday morning but a details of time and place will be confirmed nearer the time. \n\n\n## Tuesday 10th December: `On Campus Interviews`\n\nThe on campus interviews will take place on **Tuesday 10th December** from 9:15 onwards. (times to be confirmed) \n\nThese are strictly on campus and no Zoom interviews will take place this day. \n\nWhereas you must be available for the exam and interview, in some cases (e.g. where the student has shown excellent knowledge of their code) we may waive the interview. (In that case the student will receive full marks for the 'interview' part) The schedule for the interviews will be published on Monday evening.   \n\n\n## Interviews are Compulsory\n\nIt is **compulsory** that you are available for the in-class exam (unless you have been interviewed already and we have told you that you do not need to attend) and that you are available for interview on your submission the following day  in order to demonstrate both *Understanding* and *Authorship*.  \n\nThe grade for the interview is a multiplier for your assigment grade.  Should you fail to show for your interview, you will receive zero, resulting in an overall grade of zero for your submission.\n\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Submitting","id":"Submitting","type":"step"},{"title":" Marking Scheme","shortTitle":"IndicativeMarkingScheme","contentMd":"# Marking Scheme\n\n\nThere are three components to your overall mark:\n\n- Functionality of the code\n- Extra Credit\n- Interview mark\n\n# Functionality of the Code  (100 Marks)\n\n![](img/rubric-01.png)\n\n\n\n# Extra Credit (maximum grade of 100%)\n\nAll extra credit is only available if all specified functionality is attempted.  Please note, with extra credit marks, your grade cannot exceed a maximum of 100%.\n\n\n## Extra functionality bonus\n\nAn extra 10% will be available if you include extra functionality e.g.: \n\n- adding in extra functionality.\n- checking that no two student ids added are the same (no duplicate ids)\n- etc.\n\nFor example, if your grade was 70% and you added some extra credit functionality worth 6%, your final grade would be 76% (interview dependent).\n\n\n\n# Interview Mark (10 Marks) \n\nYou will be asked to explain your work. This is to ensure that the work is your own. You may be asked (for example) to explain:\n\n- Any of the code.\n- The effect of changing values in the for loop.\n- How specific methods work. \n- Etc.\n\nIf you do not present for your interview you will receive 0 for the interview and 0% overall. This means you **must** be available for interview. \n\nIf you use code other than from lectures (e.g. from StackOverFlow), you should **always** reference it. Failure to do so will lead to a zero mark. \n\n\n# How is the final mark calculated?\n \nThe final mark is calculated using the following formula:\n\n(((Functionality of Code + Extra Functionality Credit) ) * Interview Mark) / 10\n\n Example:\n \n - Functionality of code = 70/100\n - Extra Functionality Credit = 6/10\n - Interview Mark = 9/10\n - Final mark = ((70 + 6)  * 9) / 10 = 68.4%\n\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/IndicativeMarkingScheme","id":"IndicativeMarkingScheme","type":"step"},{"title":" Plan of attack and some key points","shortTitle":"Plan of attack","contentMd":"# Plan of attack and some key points\n\n\n## Plan of Attack\nThe following is a suggest plan of attack to start and complete the assignment: \n\n1.\tCreate a new IntelliJ Project in the usual way.\n\n2.\tWrite the Student class as per the spec\n3.\tIdentify the methods in the Course Class that are required to add a new Student and list all Students\n4.\tWrite these methods in the Course Class\n5.\tIdentify the methods in the Driver class that are required to add Students to the system and show the menu to the user.\n6.\tWrite these methods in the Driver Class\n\nAt this point your code should be running, and you should be able to add new Students to your system and you should be able to see the full menu but the menu items have no functionality yet.\n\n7.\tWorking through the menu items, write the corresponding methods in your Course and Driver classes until all menu items are working correctly.\n8.\tTest your code!\n\n\n## Some key points to remember when coding your assignment\n\n- You **must** use the names given for the Classes and Methods; failure to do so will result in reduced marks.\n\n- For all variables, methods and classes used, please adhere to the naming standards discussed in class.\n\n\n- Don't forget that you can get IntelliJ to generate methods such as getters, setters, constructors and toString.  It is a good idea to generate these methods and then add the additional requirements (such as validation) manually.  This will free up some time for concentrating on other areas of the assignment. \n\n- There should be absolutely *NO* **System.out.println** or **ScannerInput** reads in any class except for the Driver class.  If you have any such interaction with the user in any class other than Driver, you will lose marks.  Instead, you should be returning information back to Driver to print it.  Or passing information read in Driver to other classes via method parameters.\n\n- There should be absolutely *NO* use of **StringBuilder** \n\n- Do not use **Arrays.toString()** to display an array’s contents, instead loop through the array and build a custom string representation\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-2/Plan of attack","id":"Plan of attack","type":"step"}]},{"route":"/lab/{{COURSEURL}}/topic-00-assessment/book-3","type":"lab","title":" Sample Written Exam","summary":"sample exam for Christmas written class test","contentMd":"# Sample Written Exam\n\nsample exam for Christmas written class test\n","frontMatter":{},"id":"book-3","img":"https://{{COURSEURL}}/topic-00-assessment/book-3/sample-exam.png","imgFile":"sample-exam.png","video":"","videoids":{"videoid":"","videoIds":[]},"hide":false,"los":[{"title":" Sample Written Exam","shortTitle":".","contentMd":"# Sample Written Exam\n\nsample exam for Christmas written class test\n","route":"/lab/{{COURSEURL}}/topic-00-assessment/book-3/.","id":".","type":"step"}],"pdf":"https://{{COURSEURL}}/topic-00-assessment/book-3/sample-exam.pdf","pdfFile":"sample-exam.pdf"}]}],"properties":{"highlightstyle":"railscasts","credits":"Ms. Mairead Meagher and Ms Siobhan Roche SETU.","ignorepin":1234,"auth":4,"ignore":["topic01-intro-to-module","topic02-variables-and-data-types","topic03-inputs-and-expressions","topic04-selection","topic05-loops","topic06-arrays","topic07-methods","topic08-testing","topic09-introduction-to-classes-and-objects","topic10-encapsulation-and-interaction","topic11-arrays-of-objects","topic12-assignment-studio","topicxx-wip"]},"calendar":{"title":"Semester 1","weeks":[{"2025-06":{"title":0,"type":"Development of the course"}},{"Mon Sep 08 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":1,"type":"Topic 01 -  Introduction to the Module, Java and BlueJ"}},{"Mon Sep 15 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":2,"type":"Topic 02 - Variables and Data Types"}},{"Mon Sep 22 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":3,"type":"Topic 03 - Inputs and Expressions"}},{"Mon Sep 29 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":4,"type":"Topic 04 - Selection"}},{"Mon Oct 06 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":5,"type":"Topic 05 - Loops"}},{"Mon Oct 13 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":6,"type":"Topic 06 - Arrays"}},{"Mon Oct 20 2025 01:00:00 GMT+0100 (Irish Standard Time)":{"title":7,"type":"Topic 07 - Methods"}},{"Mon Oct 27 2025 00:00:00 GMT+0000 (Greenwich Mean Time)":{"title":"Reading Week","type":"Reading"}},{"Mon Nov 03 2025 00:00:00 GMT+0000 (Greenwich Mean Time)":{"title":8,"type":"In class exam (40%) & Topic 08 - Testing"}},{"Mon Nov 10 2025 00:00:00 GMT+0000 (Greenwich Mean Time)":{"title":9,"type":"Topic 09 - Introduction to Classes and Objects"}},{"2025-11-1":{"title":10,"type":"Topic 10 - Encapsulation and Interaction"}},{"2025-12-2":{"title":10,"type":"Topic 11 - Arrays of Objects"}},{"Tue Dec 02 2025 00:00:00 GMT+0000 (Greenwich Mean Time)":{"title":11,"type":"Assignment Studio - Assignment Studio and Handup"}},{"Tue Dec 09 2025 00:00:00 GMT+0000 (Greenwich Mean Time)":{"title":"Study Week","type":"In class test and Interviews"}}]}}